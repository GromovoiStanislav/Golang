package main

import "fmt"

func main() {

	// Примеры:
	a := 'Ы'
	fmt.Printf("%q", a)
	// вывод: 'Ы'


	var a float64 = 100.123456
	fmt.Printf("это число %f типа %T", a, a)
	// вывод: это число 100.123456 типа float64

	var a float64 = 100.123456
	fmt.Printf("это число %-9.2f типа %T", a, a)
	// вывод: это число 100.12    типа float64



	var a1 byte = 's'
	var a2 int = 1234
	fmt.Printf("%q %b", a1, a2)
	// вывод: 's' 10011010010


	// использование \n позволяет сделать перенос строки
	var a1 string = "123"
	var a2 string = "1234"
	fmt.Printf("%q \n%s", a1, a2)
	// вывод: 
	// "123" 
	// 1234


	var a = 3.14
	fmt.Printf("|%8f|\n", a)
	fmt.Printf("|%8.1f|\n", a)
	fmt.Printf("|%8.3f|\n", a)
	fmt.Printf("|%-8.3f|\n", a)
	// вывод:
	// |3.140000|
	// |     3.1|
	// |   3.140|
	// |3.140   |

/*

Каждый спецификатор представляет определенный тип данных:
%t: для вывода значений типа boolean (true или false)
%b: для вывода целых чисел в двоичной системе
%c: для вывода символов, представленных числовым кодом
%d: для вывода целых чисел в десятичной системе
%o: для вывода целых чисел в восьмеричной системе
%q: для вывода символов в двойных кавычках, если тип аргумента - "string" и одинарных если - 'rune'
%x: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют нижний регистр a-f
%X: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют верхний регистр A-F
%U: для вывода символов в формате кодов Unicode, например, U+1234
%e: для вывода чисел с плавающей точкой в экспоненциальном представлении, например, -1.234456e+78
%E: тоже самое что %e но в верхнем регистре, например, -1.234456E+78
%f: для вывода чисел с плавающей точкой, например, 123.456
%F: то же самое, что и %f

%g: для длинных чисел с плаващей точкой используется %e, для других - %f
%G: для длинных чисел с плаващей точкой используется %E, для других - %F


%s: для вывода строки
%p: для вывода значения указателя - адреса в шестнадцатеричном представлении (указатели мы пройдем на следующих уроках)
%T для вывода типа переменной

Также можно применять универсальный спецификатор %v, который для типа boolean аналогичен %t,
для целочисленных типов - %d, для чисел с плавающей точкой - %g, для строк - %s.

Для чисел с плавающей точкой можно указать точность или количество символов в дробной части. Для этого количество символов указывается после точки: %.2f - две цифры в дробной части после точки. Например, варианты форматирования чисел с плавающей точкой:
%f: точность и ширина значения по умолчанию
%9f: ширина - 9 символов и точность по умолчанию
(число с плавающей точкой будет занимать как минимум 9 позиций. Если ширина больше, чем требуется значению, то заполняется пробелами.)
%.2f: ширина по умолчанию и точность - 2 символа
%9.2f: ширина - 9 и точность - 2
%9.f: ширина - 9 и точность - 0
Также из флагов следует отметить дефис -, который дополняет значение пробелами не слева, как по умолчанию, а справа 
%-9.2f

Для структур:
%v	the value in a default format
	when printing structs, the plus flag (%+v) adds field names
%#v	a Go-syntax representation of the value
как и прочие флаги их можно комбинировать 
%+#v


*/


}